/**
 * @Copyright (c) 2013, Software.nju.edu.cn, Inc.
 * All rights reserved
 * @FileName EventLog.java
 */
package cn.edu.nju.software.Models;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.jfree.util.Log;

/**
 * @Author xlx09
 * @Classname EventLog
 * @Version 1.0.0
 * @Date 2013-3-20
 */
public class EventLog {
    /**
     * to save the taskname->taskid
     */
    private Map<String, Integer> nameIdMap = new HashMap<String, Integer>();
    
    /**
     * to save the post tasks set of each task
     */
    private Map<Integer, HashSet<Integer> > postTaskMap = new HashMap<Integer, HashSet<Integer> >();
    /**
     * to save the taskid->taskname
     */
    private ArrayList<String> tasklist = new ArrayList<String>();
    
    public EventLogRelation getRelation(){
        EventLogRelation relation = new EventLogRelation();
        relation.setDependency(this.calDependency());
        relation.setParallelism(this.calParallelism());
        return relation;
    }
    
    private int[][] calDependency(){
        int[][] dependency = new int[LamdaDefine.MAXTASKNUM][LamdaDefine.MAXTASKNUM];
        int taskNum = tasklist.size();
        for(int i = 0; i < taskNum; i++){
            for(int j = 0; j < taskNum; j++){
                if (postTaskMap.get(i).contains(j)){
                    dependency[i][j] = 1;
                }
            }
        }
        return dependency;
    }
    
    private int[][] calParallelism(){
        int[][] parallelism = new int[LamdaDefine.MAXTASKNUM][LamdaDefine.MAXTASKNUM];
        int taskNum = tasklist.size();
        
        return parallelism;
    }
    
    /**
     * @author=xlx09
     * @param InputStream input
     * @return_typ void
     * @throws 
     * @version 1.0.0
     * @Todo to read the log data from the InputStream
     */
    public void loadFromInputString(InputStream input){
        BufferedReader br = new BufferedReader(new InputStreamReader(input));
        String line = "";
        try {
            while ((line = br.readLine()) != null){
                String[] tasks = line.split("\t");
                if (tasks.length != LamdaDefine.EACHLOGLENGTH){
                    Log.warn("This "+line+" is invalid");
                    continue;
                }
                if (!nameIdMap.keySet().contains(tasks[0])){
                    nameIdMap.put(tasks[0], tasklist.size());
                    tasklist.add(tasks[0]);
                }
                String[] postTasks = tasks[1].split(",");
                HashSet<Integer> postTaskSet = new HashSet<Integer>();
                for(int i = 0; i < postTasks.length; i++){
                    if (!nameIdMap.keySet().contains(postTasks[i])){
                        nameIdMap.put(postTasks[i], tasklist.size());
                        tasklist.add(postTasks[i]);
                    }
                    postTaskSet.add(nameIdMap.get(postTasks[i]));
                }
                postTaskMap.put(nameIdMap.get(tasks[0]), postTaskSet);
            }
            Log.debug("Load log successful!\nnameIdMap is :"+nameIdMap.toString()+"\npostTaskMap is :"+postTaskMap.toString());
            br.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            Log.warn("Failed to read log", e);
            e.printStackTrace();
        }
    }
    
    
}
